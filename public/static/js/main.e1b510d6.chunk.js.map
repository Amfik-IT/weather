{"version":3,"sources":["components/Input/Input.jsx","components/Pages/Weather.jsx","App.js","reportWebVitals.js","index.js"],"names":["Input","props","type","onChange","onValueChange","value","Weather","useState","country","location","temp","feels_like","humidity","description","wind_speed","img","month","day","inputValue","info","setInfo","dataDecryptor","data","initialState","sys","name","Math","round","main","weather","wind","speed","icon","date","Date","getMonth","getDate","getWeather","coords","apiUrl","process","apiKey","apiQuery","latitude","longitude","fetch","then","response","json","catch","error","alert","navigator","geolocation","getCurrentPosition","position","className","src","alt","colSpan","onClick","id","e","newInfo","Object","assign","target","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1b510d6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Input = (props) => {\r\n  return (\r\n    <div>\r\n        <input type=\"text\" onChange={ props.onValueChange } value={props.value}></input>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;","import React, { useState } from 'react';\r\nimport Input from '../Input/Input';\r\n\r\nconst Weather = (props) => {\r\n\r\n    const [info, setInfo] = useState({\r\n        country: null,\r\n        location: null,\r\n        temp: null,\r\n        feels_like: null,\r\n        humidity: null,\r\n        description: null,\r\n        wind_speed: null,\r\n        img: 'https://openweathermap.org/themes/openweathermap/assets/vendor/owm/img/widgets/04d.png',\r\n        month: null,\r\n        day: null,\r\n        inputValue: \"\",\r\n    });\r\n\r\n    const dataDecryptor = (data) => {\r\n        const initialState = {};\r\n\r\n        initialState.country = data.sys.country; // место\r\n        initialState.location = data.name; // место\r\n        initialState.temp = Math.round(data.main.temp); // температура\r\n        initialState.feels_like = Math.round(data.main.feels_like); // температура по ощущениям \r\n        initialState.humidity = data.main.humidity; // влажность\r\n        initialState.description = data.weather[0].description; // ясность\r\n        initialState.wind_speed = data.wind.speed; // скорость ветра\r\n        initialState.img = `https://openweathermap.org/themes/openweathermap/assets/vendor/owm/img/widgets/${data.weather[0].icon}.png`;\r\n        const date = new Date();\r\n        const arrMonth = ['Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря'];\r\n        initialState.month = arrMonth[date.getMonth()];\r\n        initialState.day = date.getDate();\r\n        initialState.inputValue = \"\";\r\n\r\n        setInfo(initialState);\r\n    }\r\n\r\n    const getWeather = (coords) => {\r\n        const apiUrl = process.env.REACT_APP_API_URL;\r\n        const apiKey = process.env.REACT_APP_API_KEY;\r\n        \r\n        if (typeof coords !== \"string\") {\r\n            const apiQuery = apiUrl + \"/weather?lat=\" + coords.latitude + \"&lon=\" + coords.longitude + \"&mode=json&units=metric&lang=ru&appid=\" + apiKey;\r\n            return fetch(apiQuery)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    dataDecryptor(data);\r\n                })\r\n                .catch(error => alert(\"Ошибка получения погоды. Причина: \" + error));\r\n        } else {\r\n            const apiQuery = apiUrl + \"/weather?q=\" + coords + \"&mode=json&units=metric&lang=ru&appid=\" + apiKey;\r\n            return fetch(apiQuery)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    dataDecryptor(data);\r\n                })\r\n                .catch(error => alert(\"Ошибка получения погоды. Причина: \" + error));\r\n        }\r\n        \r\n    };\r\n \r\n    const getCoords = () => {\r\n        navigator.geolocation.getCurrentPosition(success, error);\r\n\r\n        function success(position) {\r\n            const coords = {\r\n                latitude: position.coords.latitude,\r\n                longitude: position.coords.longitude,\r\n            }\r\n            getWeather(coords);\r\n        }\r\n\r\n        function error() {\r\n            alert(`Не удалось определить ваше местоположение. Загружаем для Минска.`);\r\n            const coords = \"Minsk\";\r\n            getWeather(coords);\r\n        }\r\n    }\r\n\r\n    const onClickButoon = () => {\r\n        getWeather(info.inputValue);\r\n    }\r\n\r\n    const onValueChange = (e) => {\r\n        const newInfo = {};\r\n        Object.assign(newInfo, info)\r\n        newInfo.inputValue = e.target.value;\r\n        setInfo(newInfo);\r\n    }\r\n\r\n    if (!info.country) getCoords();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <div className=\"day\">\r\n                <div className=\"row top\">\r\n                    <p><span className=\"country\">{info.country},</span><br></br><span className=\"location\">{info.location}</span><br></br><span className=\"description\">{info.description}</span></p>\r\n                    <img src={info.img} alt=\"icon\" className=\"icon\"></img>\r\n                </div>\r\n                <div className=\"row center\">\r\n                    <div className=\"weather-left-temp\"><span>{info.temp}° C</span></div>\r\n                    <div className=\"weather-right-card\">\r\n                        <table className=\"weather-right__table\">\r\n                        <tbody><tr className=\"weather-right__items\">\r\n                            <th colSpan=\"2\" className=\"weather-right__item details\">подробности</th>\r\n                        </tr>\r\n                        <tr className=\"weather-right__items\">\r\n                            <td className=\"weather-right__item\">Как будто</td>\r\n                            <td className=\"weather-right__item weather-right__feels\"><span>{info.feels_like}° C</span></td>\r\n                        </tr>\r\n                        <tr className=\"weather-right__items\">\r\n                            <td className=\"weather-right__item\">Ветер</td>\r\n                            <td className=\"weather-right__item weather-right__wind-speed\">{info.wind_speed} м / с </td>\r\n                        </tr>\r\n                        <tr className=\"weather-right-card__items\">\r\n                            <td className=\"weather-right__item\">Влажность</td>\r\n                            <td className=\"weather-right__item weather-right__humidity\">{info.humidity}%</td>\r\n                        </tr>\r\n                        </tbody></table>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row bottom\">\r\n                    <button onClick={ onClickButoon } id=\"openWeather\">Найти</button>\r\n                    <Input onValueChange={onValueChange} value={info.inputValue}/>\r\n                    <span className=\"date\">{info.day} {info.month}</span>\r\n                </div>\r\n            </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;","import './App.css';\r\nimport Weather from './components/Pages/Weather';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Weather />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}